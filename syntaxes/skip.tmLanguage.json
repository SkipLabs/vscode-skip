{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Skip",
  "scopeName": "source.skip",
  "fileTypes": ["sk"],
  "patterns": [
    {
      "include": "#file"
    }
  ],
  "repository": {
    "file": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#modules"
        },
        {
          "include": "#code"
        }
      ]
    },
    "modules": {
      "patterns": [
        {
          "name": "meta.module.skip",
          "begin": "\\b(module)[[:space:]]+([[:word:]]+)[[:space:]]*;",
          "end": "\\b(module)[[:space:]]+(end);",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.skip"
            },
            "2": {
              "name": "entity.name.module.skip"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.other.skip"
            },
            "2": {
              "name": "keyword.other.skip"
            }
          },
          "patterns": [
            {
              "include": "#code"
            }
          ]
        },
        {
          "match": "\\b(module)[[:space:]]+(alias)[[:space:]]+([[:word:]]+)[[:space:]]*=[[:space:]]*([[:word:]]+);",
          "captures": {
            "1": {
              "name": "keyword.other.skip"
            },
            "2": {
              "name": "keyword.other.skip"
            },
            "3": {
              "name": "entity.name.module.skip"
            },
            "4": {
              "name": "variable.other.module.skip"
            }
          }
        }
      ]
    },
    "code": {
      "patterns": [
        {
          "include": "#keywords"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#constants"
        },
        {
          "include": "#block"
        },
        {
          "include": "#parenthesis"
        },
        {
          "include": "#identifiers"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#annotations"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(break|catch|do|else|for|if|loop|match|return|throw|try|while|yield)\\b",
          "name": "keyword.control.skip"
        },
        {
          "match": "\\b(children|class(?!\\()|const|fun|macro|trait|type)\\b",
          "name": "storage.type.skip"
        },
        {
          "match": "\\b(as|await|in|is)\\b",
          "name": "keyword.operator.skip"
        },
        {
          "match": "\\b(async|base(?=.+class\\b)|deferred|extends|final|frozen|mutable|native|overridable|private|protected|public|readonly|static(?=[[:space:]]+[[:word:]])|untracked|uses)\\b",
          "name": "storage.modifier.skip"
        },
        {
          "match": "\\b(this|static(?=[[:space:]]*[^[:space:][:word:]]))\\b",
          "name": "variable.language.skip"
        },
        {
          "match": "\\b(Array|Bool|Float|Int|Iterator|List|Map|Option|Sequence|String|Vector|void)\\b",
          "name": "support.type.skip"
        },
        {
          "match": "\\b(class(?=\\()|freeze|show|unsafe_chill_trust_me)\\b",
          "name": "keyword.other.magic.skip"
        },
        {
          "match": "\\b(Base|Class|Concrete|inspect)\\b",
          "name": "keyword.other.skip"
        },
        {
          "match": "#(?:(forEachField|forEachFunction|log|ThisClass|thisClassName)|([[:word:]]*))\\b",
          "captures": {
            "1": {
              "name": "keyword.other.macro.skip"
            },
            "2": {
              "name": "source.variable.macro.skip"
            }
          }
        },
        {
          "match": "(?<!\\bfun[[:space:]]+|\\.)\\b(chill|concurrent|memoized|null|watch)\\b",
          "name": "invalid.deprecated.skip"
        },
        {
          "comment": "Misplaced keyword already matched by another rule.",
          "match": "\\b(module)\\b",
          "name": "invalid.illegal.misplaced.skip"
        }
      ]
    },
    "annotations": {
      "match": "@(?:(always_inline|cpp_export|cpp_extern|cpp_runtime|debug|disasm|export|intrinsic|may_alloc|no_inline|no_return|no_throw|synonym|test|wasm_export)|([[:lower:]][[:word:]]*))\\b",
      "captures": {
        "1": {
          "name": "keyword.other.annotation.skip"
        },
        "2": {
          "name": "invalid.illegal.annotation.skip"
        }
      }
    },
    "operators": {
      "patterns": [
        {
          "comment": "Hack to make bang operator more visible",
          "match": "\\.?!(?!=)",
          "name": "markup.bold.skip"
        },
        {
          "match": "([+%?^]|/(?![/*])|\\*(?!\\*)|->?|~>|=>|[<>]=?|(!=|==?)(?!=)|&&?|\\|[|>]?|::?|@(?![[:lower:]]))",
          "name": "keyword.operator.skip"
        },
        {
          "match": "(!\\.|[=!]==|~[^>]|\\*\\*)",
          "name": "invalid.illegal.skip"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.skip"
            }
          },
          "end": "\\*/",
          "name": "comment.block.skip"
        },
        {
          "begin": "(^[ \\t]+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.skip"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "//",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.skip"
                }
              },
              "end": "\\n",
              "name": "comment.line.double-slash.skip"
            }
          ]
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "comment": "Wildcard underscore",
          "match": "\\b_\\b",
          "name": "constant.language.wildcard.skip"
        },
        {
          "match": "\\b[A-Z][a-zA-Z0-9_]*",
          "name": "source.variable.type.skip"
        },
        {
          "match": "\\b[A-Za-z_][[:word:]]+\\b",
          "name": "source.variable.skip"
        },
        {
          "match": "$[[:word:]]+\\b",
          "name": "invalid.illegal.identifier.skip"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "match": "\\b(true|false)\\b",
          "name": "constant.language.bool.skip"
        },
        {
          "match": "(?x)\n\\b(?<!\\$)\n0(x|X)\n(\n  (?<!\\.)[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[Ll]?(?!\\.)\n  |\n  (\n    [0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\\.?\n    |\n    ([0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?)?\\.[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\n  )\n  [Pp][+-]?[0-9]([0-9_]*[0-9])?[FfDd]?\n)\n\\b(?!\\$)",
          "name": "constant.numeric.hex.skip"
        },
        {
          "match": "\\b(?<!\\$)0(b|B)[01]([01_]*[01])?[Ll]?\\b(?!\\$)",
          "name": "constant.numeric.binary.skip"
        },
        {
          "match": "\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)",
          "name": "constant.numeric.octal.skip"
        },
        {
          "match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)",
          "name": "constant.numeric.decimal.skip"
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.skip"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.skip"
            }
          },
          "name": "string.quoted.double.skip",
          "patterns": [
            {
              "include": "#characters"
            }
          ]
        },
        {
          "begin": "`",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.skip"
            }
          },
          "end": "(?<!\\\\)`",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.skip"
            }
          },
          "name": "string.interpolated.skip",
          "patterns": [
            {
              "include": "#characters"
            },
            {
              "begin": "(?<!\\\\)\\$\\{",
              "end": "}",
              "patterns": [
                {
                  "include": "#code"
                }
              ]
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.skip"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.skip"
            }
          },
          "name": "string.quoted.single.skip",
          "patterns": [
            {
              "include": "#characters"
            }
          ]
        }
      ]
    },
    "characters": {
      "patterns": [
        {
          "match": "\\\\([abefnrtv\\\\'\"0${`]|x..|u.{4}|U.{8})",
          "name": "constant.character.escape.skip"
        },
        {
          "match": "\\\\([^abefnrtv\\\\'\"0${`xuU]|\\z)",
          "name": "invalid.illegal.character.escape.skip"
        }
      ]
    },
    "parenthesis": {
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "name": "meta.parenthesis.skip",
          "patterns": [
            {
              "include": "#code"
            }
          ]
        }
      ]
    },
    "block": {
      "patterns": [
        {
          "begin": "{",
          "end": "}",
          "name": "meta.block.skip",
          "patterns": [
            {
              "include": "#code"
            }
          ]
        }
      ]
    }
  }
}
